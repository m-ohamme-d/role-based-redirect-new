import jsPDF from 'jspdf';

export interface ReportData {
  title: string;
  subtitle?: string;
  sections: ReportSection[];
  metadata?: {
    generatedBy?: string;
    department?: string;
    dateRange?: string;
  };
}

export interface ReportSection {
  title: string;
  content: string | TableData | ChartData | PerformanceData;
  type: 'text' | 'table' | 'chart' | 'performance';
}

export interface TableData {
  headers: string[];
  rows: string[][];
}

export interface ChartData {
  type: 'bar' | 'line' | 'pie';
  data: { label: string; value: number }[];
}

export interface PerformanceData {
  members: {
    name: string;
    position: string;
    ratings: {
      productivity: number;
      collaboration: number;
      timeliness: number;
      overall: number;
    };
    notes?: string;
  }[];
  departmentAverage: {
    productivity: number;
    collaboration: number;
    timeliness: number;
    overall: number;
  };
  insights: string[];
}

// Add missing export functions
export const generatePDFContent = (data: any): string => {
  return `
=== ${data.reportType || 'Report'} ===
Generated: ${new Date().toLocaleString()}
Department: ${data.department || 'All Departments'}
Team Lead: ${data.teamLead || 'N/A'}
Date Range: ${data.dateRange || 'Current Period'}

=== EMPLOYEE DATA ===
${data.employees ? data.employees.map((emp: any) => `
Employee: ${emp.name}
Position: ${emp.position}
Performance: ${emp.performance}%
Email: ${emp.email}
`).join('\n') : 'No employee data available'}

=== SUMMARY ===
Total Employees: ${data.employees ? data.employees.length : 0}
Average Performance: ${data.employees ? (data.employees.reduce((sum: number, emp: any) => sum + emp.performance, 0) / data.employees.length).toFixed(1) : 0}%

Generated by: ${data.generatedBy || 'System'}
Timestamp: ${new Date().toISOString()}
`;
};

export const generateExcelContent = (data: any): string => {
  const headers = ['Name', 'Position', 'Department', 'Performance', 'Email'];
  const csvContent = [
    headers.join(','),
    ...(data.employees || []).map((emp: any) => 
      [emp.name, emp.position, data.department || '', `${emp.performance}%`, emp.email].join(',')
    )
  ].join('\n');
  
  return csvContent;
};

export const downloadFile = (content: string, filename: string, mimeType: string): boolean => {
  try {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    return true;
  } catch (error) {
    console.error('Download failed:', error);
    return false;
  }
};

export const prepareReportData = (data: any) => {
  return {
    ...data,
    timestamp: new Date().toISOString(),
    generatedBy: data.generatedBy || 'System'
  };
};

export const generatePDFReport = (data: ReportData): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPosition = 20;

  // Helper function to check if we need a new page
  const checkNewPage = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - 20) {
      doc.addPage();
      yPosition = 20;
    }
  };

  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(data.title, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Subtitle
  if (data.subtitle) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(data.subtitle, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 10;
  }

  // Metadata
  if (data.metadata) {
    doc.setFontSize(10);
    doc.setFont('helvetica', 'italic');
    const metadataLines = [
      data.metadata.generatedBy ? `Generated by: ${data.metadata.generatedBy}` : '',
      data.metadata.department ? `Department: ${data.metadata.department}` : '',
      data.metadata.dateRange ? `Period: ${data.metadata.dateRange}` : '',
      `Generated on: ${new Date().toLocaleDateString()}`
    ].filter(Boolean);
    
    metadataLines.forEach(line => {
      yPosition += 8;
      doc.text(line, 20, yPosition);
    });
    yPosition += 15;
  }

  // Process sections
  data.sections.forEach((section, index) => {
    checkNewPage(30);

    // Section title
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(section.title, 20, yPosition);
    yPosition += 15;

    switch (section.type) {
      case 'text':
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        const textLines = doc.splitTextToSize(section.content as string, pageWidth - 40);
        textLines.forEach((line: string) => {
          checkNewPage(8);
          doc.text(line, 20, yPosition);
          yPosition += 8;
        });
        break;

      case 'table':
        const tableData = section.content as TableData;
        doc.setFontSize(9);
        
        // Headers
        doc.setFont('helvetica', 'bold');
        const colWidth = (pageWidth - 40) / tableData.headers.length;
        tableData.headers.forEach((header, colIndex) => {
          doc.text(header, 20 + (colIndex * colWidth), yPosition);
        });
        yPosition += 10;

        // Rows
        doc.setFont('helvetica', 'normal');
        tableData.rows.forEach(row => {
          checkNewPage(10);
          row.forEach((cell, colIndex) => {
            doc.text(cell, 20 + (colIndex * colWidth), yPosition);
          });
          yPosition += 8;
        });
        break;

      case 'performance':
        const perfData = section.content as PerformanceData;
        
        // Performance summary
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        checkNewPage(20);
        doc.text('Department Performance Summary', 20, yPosition);
        yPosition += 15;

        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        const avgLines = [
          `Average Productivity: ${perfData.departmentAverage.productivity}%`,
          `Average Collaboration: ${perfData.departmentAverage.collaboration}%`,
          `Average Timeliness: ${perfData.departmentAverage.timeliness}%`,
          `Overall Department Rating: ${perfData.departmentAverage.overall}%`
        ];
        
        avgLines.forEach(line => {
          checkNewPage(8);
          doc.text(line, 20, yPosition);
          yPosition += 8;
        });
        yPosition += 10;

        // Individual performance
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        checkNewPage(20);
        doc.text('Individual Performance Breakdown', 20, yPosition);
        yPosition += 15;

        perfData.members.forEach(member => {
          checkNewPage(40);
          doc.setFontSize(11);
          doc.setFont('helvetica', 'bold');
          doc.text(`${member.name} - ${member.position}`, 20, yPosition);
          yPosition += 10;

          doc.setFontSize(9);
          doc.setFont('helvetica', 'normal');
          const memberLines = [
            `  Productivity: ${member.ratings.productivity}%`,
            `  Collaboration: ${member.ratings.collaboration}%`,
            `  Timeliness: ${member.ratings.timeliness}%`,
            `  Overall Rating: ${member.ratings.overall}%`
          ];
          
          if (member.notes) {
            memberLines.push(`  Notes: ${member.notes}`);
          }

          memberLines.forEach(line => {
            checkNewPage(8);
            doc.text(line, 20, yPosition);
            yPosition += 8;
          });
          yPosition += 5;
        });

        // Insights
        if (perfData.insights.length > 0) {
          checkNewPage(30);
          doc.setFontSize(12);
          doc.setFont('helvetica', 'bold');
          doc.text('Key Insights & Recommendations', 20, yPosition);
          yPosition += 15;

          doc.setFontSize(10);
          doc.setFont('helvetica', 'normal');
          perfData.insights.forEach((insight, idx) => {
            checkNewPage(15);
            doc.text(`${idx + 1}. ${insight}`, 20, yPosition);
            yPosition += 12;
          });
        }
        break;

      case 'chart':
        const chartData = section.content as ChartData;
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        
        checkNewPage(50);
        doc.text('Chart Data:', 20, yPosition);
        yPosition += 10;

        chartData.data.forEach(item => {
          checkNewPage(8);
          doc.text(`${item.label}: ${item.value}`, 30, yPosition);
          yPosition += 8;
        });
        break;
    }

    yPosition += 20;
  });

  // Footer
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(`Page ${i} of ${totalPages}`, pageWidth - 30, pageHeight - 10);
  }

  // Save the PDF
  const fileName = `${data.title.toLowerCase().replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

// Helper function to create comprehensive team performance report
export const createTeamPerformanceReport = (teamData: any[]): ReportData => {
  const allMembers = teamData.flatMap(team => 
    team.members?.map((member: any) => ({
      ...member,
      teamName: team.name,
      department: team.department
    })) || []
  );

  // Calculate department averages
  const totalMembers = allMembers.length;
  const departmentAverage = totalMembers > 0 ? {
    productivity: Math.round(allMembers.reduce((sum, m) => sum + m.ratings.productivity, 0) / totalMembers),
    collaboration: Math.round(allMembers.reduce((sum, m) => sum + m.ratings.collaboration, 0) / totalMembers),
    timeliness: Math.round(allMembers.reduce((sum, m) => sum + m.ratings.timeliness, 0) / totalMembers),
    overall: Math.round(allMembers.reduce((sum, m) => sum + m.ratings.overall, 0) / totalMembers)
  } : { productivity: 0, collaboration: 0, timeliness: 0, overall: 0 };

  // Generate insights
  const insights = [
    `Department has ${totalMembers} active team members across ${teamData.length} teams`,
    `Top performer: ${allMembers.length > 0 ? allMembers.reduce((top, member) => 
      member.ratings.overall > top.ratings.overall ? member : top).name : 'N/A'}`,
    `Average productivity score is ${departmentAverage.productivity}% - ${departmentAverage.productivity >= 85 ? 'Excellent' : departmentAverage.productivity >= 70 ? 'Good' : 'Needs Improvement'}`,
    `Collaboration scores are ${departmentAverage.collaboration >= 80 ? 'strong' : 'moderate'} with an average of ${departmentAverage.collaboration}%`,
    totalMembers > 0 ? `${Math.round((allMembers.filter(m => m.ratings.overall >= 80).length / totalMembers) * 100)}% of team members have overall ratings above 80%` : 'No performance data available'
  ];

  return {
    title: 'Team Performance Analysis Report',
    subtitle: 'Comprehensive Performance Metrics and Analysis',
    metadata: {
      generatedBy: 'Team Lead Dashboard',
      department: teamData[0]?.department || 'Multiple Departments',
      dateRange: `${new Date().toLocaleDateString()} - Current Period`
    },
    sections: [
      {
        title: 'Executive Summary',
        type: 'text',
        content: `This report provides a comprehensive analysis of team performance across ${teamData.length} teams with ${totalMembers} total members. The overall department performance shows an average rating of ${departmentAverage.overall}%, indicating ${departmentAverage.overall >= 85 ? 'excellent' : departmentAverage.overall >= 70 ? 'good' : 'developing'} team effectiveness.`
      },
      {
        title: 'Team Overview',
        type: 'table',
        content: {
          headers: ['Team Name', 'Team Lead', 'Members', 'Avg Performance', 'Department'],
          rows: teamData.map(team => [
            team.name,
            team.lead,
            (team.members?.length || 0).toString(),
            `${team.performance}%`,
            team.department
          ])
        }
      },
      {
        title: 'Detailed Performance Analysis',
        type: 'performance',
        content: {
          members: allMembers,
          departmentAverage,
          insights
        }
      },
      {
        title: 'Performance Distribution',
        type: 'chart',
        content: {
          type: 'bar',
          data: [
            { label: 'Productivity', value: departmentAverage.productivity },
            { label: 'Collaboration', value: departmentAverage.collaboration },
            { label: 'Timeliness', value: departmentAverage.timeliness },
            { label: 'Overall', value: departmentAverage.overall }
          ]
        }
      }
    ]
  };
};
